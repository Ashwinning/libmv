#summary Thoughts about the library uses and organization.
#labels brainstorming,organization,planning

= Introduction =

In this page we put general thoughts about the library and what we want it to be.  The idea is to put what ever we have in mind, so that we progressively get an idea of what has to be done.  We can start by enumerating possible users and uses of the library.  Then, we enumerate the required functionalities.  And finally, we will hopefully get an idea on how to organize the library.  A kind of work plan would be nice too.


= Users and Uses =
  * Computer vision researchers can use the library
    * as a black box for calibrating images sequences,
    * or as a library to develop and test their calibration and reconstruction algorithms.
  * Programmers of 3D software can use the library to add motion tracking and image based modeling capabilities.
  * If in addition to the library we develop easy applications, then 3D artists can use this applications to
    * do motion tracking of videos for 3D post-production.
    * get 3D models of real objects from photographs or videos.
  * ...

= Functionalities =

  * Feature matching and tracking
    * tracking: klt
    * matching: sift, surf
    * contour matching
    * robust matching using epipolar geometry

  * Structure from Motion
    * Calibration with target
      * 3d target
      * planar target
    * Calibrated SFM
    * Uncalibrated projective SFM
    * Self-calibration
      * plane-based
      * general

  * Dense Reconstruction
    * Depth map estimation
      * plane sweep (winner takes all)
      * MRF (with BP, TRW-BP, graph-cuts)
      * graph-cuts with occlusions
    * Depth map merging
      * Curless levoy
      * TV-L1 regularized (Zach07)
    * Volumetric Graph-cuts
      * discreet
      * continuous using TV and continuous max-flow
    * Surface evolution
      * minimize Prediction error (Pons05)
      * minimize Reprojection error (Soato01, Gargallo07)
      * using Level-set
      * using Delaunay shapes



= Library Organization =

== Temptative Data Structure for SFM ==

Here is possible set of data types representing the entities required by structure from motion algorithms.

An important design choice which I (pau) think that would be very practical, is to use these classes as _dummy_ containers, and implement the algorithms that compute or use these structures in other classes.  For example, instead of something like
{{{
TrakedSequence ts;
for(...)
  ts.AddFrame(...);
ts.ComputeTracks();
}}}
it is better something like
{{{
TrakedSequenceComputator tsc;
for(...)
  tsc.AddFrame(...);
tsc.ComputeTracks();
TrackedSequence ts = tsc.GetTrackedSequence();
}}}
The advantage is that the data classes will be independent of the algorithms that are used to compute them.  Thus, testing different algorithms will be much easier.  This is something fairly standard, but I always tend to forget it and implement algorithms inside data classes.


Here goes the data classes:

 * `FeaturePoint`
   * `Frame` reference
   * coordinates
   * orientation
   * scale
   * descriptor

 * `Frame`
   * file name
   * width and height
   * List of `FeaturePoints`

 * `FeaturePointMatch`
   * 2 `FeaturePoints` references

 * `TwoFrameMatches`
   * 2 `Frame` references
   * List of `FeaturePointMatch`

 * `FeaturePointTrack`
   * map<`Frame` reference, `FeaturePoint` reference>

 * `TrackedSequence`
   * List of `Frame` references
   * List of `FeaturePointTrack` references


*Question:* Should a `FeaturePoint` have a pointer to its `Frame`?

*Answer:* not sure if it is required, but could be usefull.


*Question:* Should it be a list or a vector of `FeaturePoints`?

*Answer:* A list is more flexible.  It enables to remove a `FeaturePoint` from the list without invalidating the pointers to the others.


*Question:* If `FeaturePoint` already has a pointer to its frame, then the 2 `Frame` references on `TwoFrameMatches` are unnecessary.

*Answer:* Yes, but it looks more clear like this, and may be one day `FeaturePoint` will have no reference to its `Frame`.


*Question:* Wouldn't it be simpler to deal with memory management if `TrackedSequence` contained list of actual objects instead of lists of references?

*Answer:* Memory management would be simpler.  However, having lists of references allows to have different `TrakedSequence`s sharing the same frames and tracks without copies.  


= Work plan =