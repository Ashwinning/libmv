#summary One-sentence summary of this page.

To support stereo from wide baseline images (i.e. what a typical user would have when shooting from a handheld still camera rather than a video camera), libmv needs to have at least one strategy for wide baseline matching. There are several possibilities. The obvious one that everyone knows is SIFT, and is the most popular. There are several implementations. The others include SURF, DAISY, GLOH, and others.

 * SIFT - [http://libsift.sourceforge.net/ libsiftfast]. Unclear license terms.
 * SIFT - [http://vision.ucla.edu/~vedaldi/code/sift/sift.html SIFT]. Pedagogical C implementation, not derived from Lowe's implementation.
 * SIFT - [http://vision.ucla.edu/~vedaldi/code/siftpp/siftpp.html SIFT++]. Faster version than the C one above, but still superceeded by VLFeat.
 * SIFT - [http://web.engr.oregonstate.edu/~hess/index.html Rob Hess's implementation]. Uses OpenCV. GPL'd.
 * SIFT - [http://www.cs.wustl.edu/~rstancha/oss.php OpenCV based C++ library]. License unclear. Unmaintained.
 * SIFT - [http://ilab.usc.edu/toolkit/home.shtml iLab Neuromorphic Vision C++ Toolkit] has an implementation. GPL'd.
 * SIFT - [http://www.cs.man.ac.uk/~liuja/ JIFT]. Unclear license terms.
 * SURF - [http://jmkirby.co.uk/index.html OpenSURF]. GPL, based on OpenCV.
 * DAISY - [http://cvlab.epfl.ch/research/surface/dense_matching/ daisy-1.3]. GPL, original. This is pretty promising. The algorithm doesn't look too hard to implement; conceivably it could be reimplemented from [http://cvlab.epfl.ch/publications/publications/2008/TolaLF08.pdf the paper (pdf)].
 * [http://www.vlfeat.org/ VLFeat] - A library with many common matching algorithms. This would be great, but is GPL.

=== Approximate nearest neighbour matching ===

Traditionally best-bin-first kdtrees are used for this, but increasingly LSH is used.

 * [http://code.google.com/p/lshkit/ lshkit] is a GPL'd LSH implementation, but it appears to be more research focused and not yet mature.
 * [http://www.cs.umd.edu/~mount/ANN/ ANN] is LGPL'd, but not particularly fast. It is probably sufficient for now and can be replaced later.