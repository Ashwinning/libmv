#summary Discussion of the image library in libmv.

= Introduction =

There are many image libraries to chose from. In libmv there are a couple of constraints on what libraries we can use, because we want to remain commercial friendly. Furthermore, we would like whatever image library we chose to be sufficiently understandable that we can modify it if necessary.

Because the focus is on tracking, our initial needs are fairly limited:
  * loading the image,
  * converting to grayscale,
  * and access its pixels with subpixel precision.

Given that the needs are few, that we want to reduce libmv's dependencies to a minimum, and that we want to have control on how the images behave, we have decided to design our own image library.

== Goals ==
  * Simple and compact image container, which do not necessarily own the pixel data.
  * Easy access to the raw image data.
  * Easy conversion from and to other image types without copying pixel data.
  * Friendly access to pixel data as `image(i,j,k)`.
  * Basic support for different pixel formats (grayscale, RGB, RGBA, ...) and channel arranging strategies (an array of RGB values vs. 3 arrays, one per color).
  * Read and write in a variety of formats.  Initially, `.pgm` (trivial), `.png` (via `libpng`), and jpg (via `libjpeg`).
  * Different interpolation methods (nearest, linear, cubic).
  * Support for building image pyramids.


== Non-Goals ==
  * A video library.  For now video will be read as a sequence of image files.
  * Drawing functionality.


= Design =
A simple 3D array is an image container that satisfies our needs...


