# Copyright (c) 2007, 2008 libmv authors.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

###############################################################################
# You may have to edit this section.

# Update this boost path. Make sure you have at least boost 1.34.
boost_dir = "/usr/local/include/boost-1_34"

# This is the dir where QT4 headers are.
qt_dir = "/usr"

###############################################################################
# Don't change past here.

import os
options = dict(CPPPATH = [boost_dir,
                          os.path.join(os.getcwd(), 'src'),
                          os.path.join(os.getcwd(), 'src/third_party'),
                          os.path.join(os.getcwd(),
                                       'src/third_party/gtest/include'),
                          os.path.join(os.getcwd(),
                                       'src/third_party/gtest'),
                         ],
               QTDIR = qt_dir,
               tools = ['default'],
               toolpath = [os.getcwd()],
               topleveldir = os.getcwd())

def add_options(options, entry, option):
    options_list = options.setdefault(entry, [])
    if type(option) == list:
        options_list.extend(option)
    else:
        options_list.append(option)

if ARGUMENTS.get('profile', 0):
    add_options(options, 'CXXFLAGS', '-pg')
    add_options(options, 'LINKFLAGS', '-pg')

show_commands = ARGUMENTS.get('show_commands', 0)
if not show_commands:
    options.update(dict(CCCOMSTR           = '[ obj ] $TARGET',
                        CXXCOMSTR          = '[ obj ] $TARGET',
                        SHLIBCOMSTR        = '[ obj ] $TARGET',
                        SHCXXCOMSTR        = '[ obj ] $TARGET',
                        SHCCCOMSTR         = '[ obj ] $TARGET',
                        SHLINKCOMSTR       = '[ dll ] $TARGET',
                        ARCOMSTR           = '[ lib ] $TARGET',
                        QT4_MOCFROMHCOMSTR = '[ moc ] $TARGET',
                        RANLIBCOMSTR       = '[ idx ] $TARGET',
                        LINKCOMSTR         = '        $TARGET'))

# Force VXL to use native STL.
add_options(options, 'CXXFLAGS', '-DVCL_USE_NATIVE_STL')

import copy

# TODO(keir): Use scons configure mechanism to detect QT and Boost.
# TODO(keir): Make this work with windows!
optimized_options = copy.deepcopy(options)
add_options(optimized_options, 'CXXFLAGS',
            Split('-Wall -W -O3 -funroll-loops -fomit-frame-pointer'))
optimized_options['build_dir'] = os.getcwd() + '/' + 'bin-opt'

debug_options = copy.deepcopy(options)
add_options(debug_options, 'CXXFLAGS',
            Split('-Wall -W -Wfatal-errors -Werror -O0 -g'))
debug_options['build_dir'] = os.getcwd() + '/' + 'bin-dbg'

options = debug_options
Export('options')
SConscript('src/sconscript', build_dir='bin-dbg')

options = optimized_options
Export('options')
SConscript('src/sconscript', build_dir='bin-opt')

if not ARGUMENTS.get('optimized', 0):
    Default('bin-dbg')
else:
    Default('bin-opt')
